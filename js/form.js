// 1.Изучите, что значит загрузка изображения, и как, когда и каким образом показывается форма редактирования изображения. Напишите код и добавьте необходимые обработчики для реализации этого пункта техзадания. В работе вы можете опираться на код показа окна с полноразмерной фотографией, который вы, возможно, уже написали в предыдущей домашней работе.

// Важно. Подстановка выбранного изображения в форму — это отдельная домашняя работа. В данном задании этот пункт реализовывать не нужно.

// 1. Загрузка нового изображения на сайт и заполнение информации о нём
// 1.1. Загрузка нового изображения:

// выбор файла с изображением для загрузки;
// изменение масштаба изображения;
// применение одного из заранее заготовленных эффектов;
// выбор глубины эффекта с помощью ползунка;
// добавление текстового комментария;
// добавление хэш-тегов.


// 1.2. Выбор изображения для загрузки осуществляется с помощью стандартного контрола загрузки файла #upload-file, который стилизован под букву «О» в логотипе. После выбора изображения (изменения значения поля #upload-file), показывается форма редактирования изображения. У элемента .img-upload__overlay удаляется класс hidden, а body задаётся класс modal-open.

// После выбора изображения пользователем с помощью стандартного контрола загрузки файла #upload-file, нужно подставить его в форму редактирования вместо тестового изображения.(не нужно)


// 2.После реализуйте закрытие формы.

// Обратите внимание, что при закрытии формы дополнительно необходимо сбрасывать значение поля выбора файла #upload-file. В принципе, всё будет работать, если при повторной попытке загрузить в поле другую фотографию. Но! Событие change не сработает, если пользователь попробует загрузить ту же фотографию, а значит окно с формой не отобразится, что будет нарушением техзадания. Значение других полей формы также нужно сбрасывать.

// 1.3 Закрытие формы редактирования изображения производится либо нажатием на кнопку #upload-cancel, либо нажатием клавиши Esc. Элементу .img-upload__overlay возвращается класс hidden. У элемента body удаляется класс modal-open.


// Напишите код для валидации формы добавления изображения. Список полей для валидации:

// Хэш-теги
// Комментарий
// Реализуйте логику проверки так, чтобы, как минимум, она срабатывала при попытке отправить форму и не давала этого сделать, если форма заполнена не по правилам. При желании, реализуйте проверки сразу при вводе значения в поле.

// Как отменить обработчик Esc при фокусе?
// Задача не имеет одного верного решения, однако намекнём на самый простой — использовать stopPropagation для события нажатия клавиш в поле при фокусе.

// Валидация хеш-тегов?
// Для валидации хэш-тегов вам придётся вспомнить, как работать с массивами. Набор хэш-тегов можно превратить в массив, воспользовавшись методом .split(). Он разбивает строки на массивы. После этого, вы можете написать цикл, который будет ходить по полученному массиву и проверять каждый из хэш-тегов на предмет соответствия ограничениям. Если хотя бы один из тегов не проходит нужных проверок, показывать сообщение об ошибке.

// Поля, не перечисленные в техзадании, но существующие в разметке, особой валидации не требуют.
import { isEscapeKey } from "./until.js";

const body = document.querySelector('body');
const uploadForm = body.querySelector('.img-upload__form');
const inputFile = uploadForm.querySelector('#upload-file');
const imgEditor = uploadForm.querySelector('.img-upload__overlay');
const cancelButton = imgEditor.querySelector('#upload-cancel');

// const onModalEscKeyDown = () => {};

function openUploadModal () {
  imgEditor.classList.remove('hidden');
  body.classList.add('modal-open');
}

function closeUploadModal () {
  imgEditor.classList.add('hidden');
  body.classList.remove('modal-open');
  uploadForm.reset();
}

inputFile.addEventListener ('change' , () => {
  openUploadModal();
});

cancelButton.addEventListener('click', ()=> {
  closeUploadModal();
});

document.addEventListener ('keydown', (evt) => {
  if(isEscapeKey(evt)) {
    evt.preventDefault();
    closeUploadModal();
  }
});

document.removeEventListener ('keydown', () =>{});


console.group(`Переменные`);
console.log(inputFile);
console.log(imgEditor);
console.log(body);
console.log(cancelButton);
console.log(uploadForm);
console.groupEnd();

export { };

